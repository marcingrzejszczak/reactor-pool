/*
 * Copyright (c) 2018-Present Pivotal Software Inc, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


ext {
	resolveRepoName = { Project project ->
		resolvedRepoName = "libs-${resolveVersion(project.version)}-local"
		logger.lifecycle("For project [$project.name] with " +
				"version [$project.version] the resolved Artifactory repo is [$resolvedRepoName]")
		return resolvedRepoName
	}

	isReleaseVersion = version.endsWith("RELEASE")
	isMilestoneVersion = version.matches('[0-9].[0-9].[0-9].M[0-9]+') || version.matches('[0-9].[0-9].[0-9].RC[0-9]+')
	isSnapshotVersion = !(isReleaseVersion || isMilestoneVersion)
	isReleaseToCentral = project.hasProperty('central')

	resolveVersion = { String version ->
		if (isMilestoneVersion) {
			return 'milestone'
		}
		if (isReleaseVersion) {
			return 'release'
		}
		return 'snapshot'
	}

	repoUrl = isReleaseToCentral ?
			"https://oss.sonatype.org/service/local/staging/deploy/maven2/" :
			"https://repo.spring.io/${resolveRepoName(project)}"
	logger.lifecycle("Resolved url is [${repoUrl}]")
}

publishing {

	repositories {
		maven {
			url repoUrl
			credentials {
				username getProp('REPO_USERNAME') ?: 'admin'
				password getProp('REPO_PASSWORD') ?: 'password'
			}
		}
	}

	publications {
		mavenJava(MavenPublication) {
			artifactId = 'reactor-pool'
			from components.java
			pom {
				afterEvaluate {
					name = project.description
					description = project.description
				}
				url = 'https://projectreactor.io'
				organization {
					name = 'Pivotal Software, Inc.'
					url = 'https://pivotal.io/'
				}
				licenses {
					license {
						name = 'The Apache Software License, Version 2.0'
						url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
						distribution = 'repo'
					}
				}
				scm {
					url = 'https://github.com/reactor/reactor-pool'
					connection = 'scm:git:git://github.com/reactor/reactor-pool'
					developerConnection = 'scm:git:git://github.com/reactor/reactor-pool'
				}
				issueManagement {
					system = "GitHub Issues"
					url = "https://github.com/reactor/reactor-pool"
				}
				developers {
					developer {
						id = 'smaldini'
						name = 'Stephane Maldini'
						email = 'smaldini at pivotal.io'
					}
					developer {
						id = 'simonbasle'
						name = 'Simon Basl√©'
						email = 'sbasle at pivotal.io'
					}
					developer {
						id = 'violetagg'
						name = 'Violeta Georgieva'
						email = 'vgeorgieva at pivotal.io'
					}
					developer {
						id = 'bsideup'
						name = 'Sergei Egorov'
						email = 'segorov at pivotal.io'
					}
					developer {
						id = 'akarnokd'
						name = 'David Karnok'
						email = 'akarnokd at gmail.com'
					}
				}
				// remove scope information from published BOM
				// to be removed after Gradle 6.0 upgrade, see https://github.com/gradle/gradle/issues/10878
				withXml {
					asNode().dependencyManagement.first().dependencies.first().each {
						it.remove(it.scope.first())
					}
				}
			}
			versionMapping {
				usage('java-api') {
					fromResolutionResult()
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}
		}
	}
}

String getProp(String propName) {
	return hasProperty(propName) ?
			(getProperty(propName) ?: System.properties[propName]) : System.properties[propName] ?:
			System.getenv(propName)
}